â†‘Java EE
    ----------------------------------------------------------------

                                        Servlets
                                        ---------
query string:

        url ? var-1 = vaue-1 & var-2 = value-2 & ...


request.getParameter("parameter-name")


Request Dispatching:        (server-side redirection)
-----------------------
    i) include
    ii) forward


            client  -> first
                         |
                       second


sendRedirect():             (client-side redirection)


ServletConfig
    setAttribute(key, value)
    getAttribute(key)

    data stored in the config object, is available for all users of the servlet.

ServletContext
    setAttribute(key, value)
    getAttribute(key)

    data stored in the context object, is available for all servlets.

    getServletContext()
    getInitParameter(key);



                                                JSP
                                        -----------------------

    Model           :   data
    View            :   jsp
    Controller      :   servlets






                                                Java EE Frameworks
                        ============================================================
						
                                                Hibernate
                                        ---------------------------

ORM Frameworks:
    Hibernate
    TopLink
    MyBatis (iBatis)

Data Representation                         OOP                             RDBMS
....................................................................................................
Entity Def                                  class                           table
Properties                                  field                           column
Behaviours                                  method                          ---
Entity                                      object                          record/Tuple

It is called "Paradigm Mismatch"


Has A Relationships (Aggregation)
 Composition
    an entity possess another entity        class Address {                 Employees
    An Employee composes of an Address          String street;               empid,name,slary,street,city
                                                String city;
                                            }

                                            class Employee {
                                                Long empId;
                                                String name;
                                                Double salary;
                                                Address address;
                                            }

                                            class MovieTicketId{
                                                String seatNumber;
                                                LocalDateTime showDateTime;
                                                String theaterName;
                                                String screen;
                                            }

                                            class MovieTicket{
                                                MovieTicketId ticketid;
                                                String showTitle;  
                                                String ticketHolderName;
                                            }

 Association
    OneToOne                                class BankAccount {             BankAccount
                                                String accNum;                 accNum,ifsc,bankName
                                                String ifsc;
                                                String bankName;
                                                Employee holder;
                                            }

                                            class Employee{                 Employees
                                                Long empId;                     empid,name,basic,accnum
                                                String name;
                                                Dobule basic;
                                                BankAccount salAccount;
                                            }

    OneToMany                               class Department {              Depts
    ManyToOne                                   Long deptId;                   deptId,title
                                                String title;
                                                Set<Employee> emps;
                                            }

                                            class Employee {                Employees
                                                Long empId;                     empid,name,basic,deptid
                                                String name;
                                                Double basic;
                                                Department dept;
                                            }

    ManyToMany                              class Employee {                Employees
                                                Long empId;                     empid,name,basic
                                                String name;
                                                Double basic;
                                                Set<Project> projects;
                                            }     

                                            class Project {                 Projects
                                                Long projectId;                 prjId,title
                                                String projectTitle;
                                                Set<Employee> team;
                                            }
                                                                            Prj_Emps
                                                                                prjid,empid



                                            class Employee {                Employees
                                                Long empId;                     empid,name,basic
                                                String name;
                                                Double basic;
                                                @OneToMany
                                                Set<TeamMembership> projects;
                                            }     

                                            class Project {                 Projects
                                                Long projectId;                 prjId,title
                                                String projectTitle;
                                                @OneToMany
                                                Set<TeamMembership> team;
                                            }
                                            
                                            class TeamMembership {          Memeberships
                                                Long membershipId;              msid,empId,prId,role
                                                @ManyToOne
                                                Employee member;
                                                @ManyToOne
                                                Project project;
                                                String role;
                                            }

Is A Relationships (Realization)            class Employee {                
                                                Long empId;                   
                                                String name;
                                                Double basic;
                                            }

                                            class Manager extends Employee{
                                                Double allowence;
                                            }

                                            class ContractEmployee extends Employee {
                                                Integer duration;
                                            }

                                                       Single Table       AllEmployees
                                                                             empid,name,basic,allowence,duration,
                                                                             emp_type - DiscriminatorColumn
                                                                             "E", "M", "C" - DiscriminatorValue


                                                       Joined               Emps    empid(PK),name,basic
                                                                            Mgrs    empid(PK FK),allowence
                                                                            cemps   empid(PK FK),duration
                                                                            
                                                       Table Per Class      emps_only    empid(PK),name,basic
                                                                            mgrs_only    empid(PK),name,basic,allow
                                                                            cemps_only   empid(PK),name,basic,duration


    HQL:
        stands for Hibernate Query Language.

        HQL doesnt need tables, it works with entities and properties.

    Query
    TypedQuery


    what is the difference between get() and load()?

        load() return "ObjectNotFoundException" when entity not found.
        get() return null when entity not found.

    
    Criteria:
    -----------
    
    Example of HCQL to get all the records
    
    Crietria c=session.createCriteria(Emp.class);//passing Class class argument  
    List list=c.list();  

    Example of HCQL to get the 10th to 20th record
    Crietria c=session.createCriteria(Emp.class);  
    c.setFirstResult(10);  
    c.setMaxResults(20);  
    List list=c.list();  


    Example of HCQL to get the records whose salary is greater than 10000
    Crietria c=session.createCriteria(Emp.class);  
    c.add(Restrictions.gt("salary",10000));     //salary is the propertyname  
    List list=c.list();  


    Example of HCQL to get the records in ascending order on the basis of salary
    Crietria c=session.createCriteria(Emp.class);  
    c.addOrder(Order.asc("salary"));  
    List list=c.list(); 

    HCQL with Projection
    We can fetch data of a particular column by projection such as name etc. 
    
    Criteria c=session.createCriteria(Emp.class);  
    c.setProjection(Projections.property("name"));  
    List list=c.list();  



                                                    JPA with Hibernate
                                                --------------------------
    
    JPA - Java Persistence API + (JTA - Java Transaction API)
-----------------------------------------------------------

    To work with ORM concept, Java provide the following two API's.

    JPA     :   Java Peristence API                                        
    JTA     :   Java Transaction API

    JPA and JTA are JavaEE specifications to provide the ORM for java applications.

    JPA / JTA implementations / JPA or JTA Providers
        1. Hibernate
        2. TopLink
        3. iBatis ...etc

    1. Entity Mapping

            @Entity                 class level     configs that a class is an entity
            @Emedable               class level     configs that a class is a part of an entity

            @Table(name="")         class level     map the entity class with a table

            @Inheritence            class level     config the Is A type 
                                                    (Single table/join table/table per class)
            @DiscriminatorColumn    class level
            @DiscriminatorValue     class level

            @Embeded                Field level     config that a field is a embedable object (composition)

            @Id                     Field level     config a field as primary key
            @EmbededId              Field level     config a field as a composite key

            @GeneratedValue         Field level     used along with @Id
                                                        AUTO            jpa-provider's inmeme seqeunce
                                                        IDENTITY        SQL Server/MySQL PK as identity col
                                                        SEQUENCE        oracle sequence

            @Column                 Field level     is an optional annotation on each field
                                                    configs column name,nullable, unique ..etc
                                                    if a field is not marked with @column annotation, then
                                                    that field is mapped to a colmun having the smae name as 
                                                    that of the field.

            @Transient              Field level     config that a field need not be persisted in the db table.

            @OneToOne               Field level
            @OneToMany              Field level
            @ManyToOne              Field level
            @ManyToMany             Field level

                    mappedBy                        configs the name of the field of 
                                                    the entity on the oppsite side of the relation
                    fetchStrategy                   LAZY | EAGER
                    cascade                         ALL | PERSIST | MERGE | DELETE | NONE | REFERESH | ORPHAN

            @JoinColumn             Field level     config a name to the foreign key col
            @JoinTable              Field level     configs a thrid talbe for relatiosn incase of ManyToMany



    JPQL    (Java Persistence API Query Language)

    JPA Configuration:

        project-root/META-INF/persistence.xml

            <perssitence-unit>

            </persistence-unit>    

    JPA API:

        Persistence
            createEntityManagerFactory(String persistenceUnitName)
                EntityManagerFactory
                    createEntityManager()
                        EntityManager
                            persist(entity)                     INSERT
                            merge(entity)                       UPDATE
                            remove(entity)                      DELETE
                            find(Entity.class, idValue)         SELECT .. WHERE 

                            getTransaction()
                                EntityTransaction
                                    begin()
                                    commit()
                                    rollback()
                            createQuery(String jpql)
                                Query
                                    setParameter(String paramName, Object value)
                                    getResultList()
                                    getResultStream()

                            createQuery(String jpql, Entity.class)
                                TypedQuery
                                    setParameter(String paramName, Object value)
                                    getResultList()
                                    getResultStream()


                                            JPQL
                                        -------------


    SQL                                                     JPQL

    select * from students;                             SELECT s FROM Student s

    select btitle, zonar from books;                    SELECT b.title, b.zonar FROM Book b

    sekect title, addressLine1 from vendors;            SELECT v.title, v.address.addressLine1 FROM Vendor v

    select e.fullName, d.deptName                       SELECT e.fullName, e.dept.deptName FROM Employee e
    from emps e cross join depts d
    where e.dept_deptId = d.deptId

    select e.fullName, d.deptName                       SELECT e.fullName, d.deptName
    from emps inner join depts d                        FROM Employee e INNER JOIN Department d
    where e.dept_deptId = d.deptId;                     ON e.dept = d

    select d.deptName, count(*)                         SELECT d.deptName, COUNT(e)
    from emps e inner join depts d                      FROM Employee e INNER JOIN Department d
    on e.dept_deptID = d.deptId                         ON e.dept = d
    group by d.deptName                                 GROUP BY d.deptName




                                                Spring Framework
                                            --------------------------
What is Framework?
    A framework is a large bodies (usually many classes) of pre-defined code to which we can add our own code
    to solve a problem in a specific domain.

Advantages of a framework?
    efficiency, security, expenses, support

Disadvantages of a framework?
    restriction, code is public, custom built features

examples:
    JSF (Java Server Faces)
    Struts 
    Hibernate


What is Spring?
    Spring Framework is a Java platform that provide a comprehensive infrastructure support for developing
    Java applications.
    Spring Framework handles the infrastructure,  so we can foucs on our applciation.

    
Advantages of Spring?
    Light Weight
    Pluggable
    Open Source
    Reduce Overall Complexicity


Spring Container
    creating and manage objects     (IoC - Inversion of Control Principle)
    inject dependencies             (DI - Dependency Injection)

BeanFactory interface
    is the root interface for accessing the spring container.
    it follows lazy loading
    means beans are only instantialing when we ask for it.
    used in small applications (like mobile apps)

    XMLBeanFactory is the implementation class.
    (deprecated)


ApplicationContext interface extends BeanFactory interface
    it is the central interface within a spring application that is used for providing Configuration
    information to the application.
    it includes all the functionality of BeanFactory and much more.
    It support large scale application development.


    configurations can be defined in multiple ways ....
    1) using xml file
    2) using annotations
    3) using java class (java based configuration) with annotations
    4) external configuration       (propertie files)

    
    FileSystemXMLApplicationContext class       :   fully qualified xml file specification is required.
    ClassPathXMLApplicationContext class        :   xml file is searched in the classpath
    AnnotationConfigApplicationContext class    :   used only when we use java based configurations
    
    WebApplicationContext inteface extends ApplicationContext interface
        XMLWebApplcationContext class
        AnnotationConfigWebApplicationContext class


    
    Spring Modules (Projects):              (spring.io)
    ----------------------------
    +   Spring Core         IoC,DI
        +   Spring Context  Life Cycle Management of Beans
        +   Spring SpEL     Expression Language
        +   Spring Bean

    +   Spring Boot

    +   Spring Web MVC

    +   Spring Data
        +   Spring Data JDBC
        +   Spring Data JPA

    +   Spring REST

    +   Spring Cloud        etc.,



    Spring Bean Scopes:
    -----------------------
    1) singleton    (default scope)
    2) prototype

    3) request
    4) session
    5) global session



    Dependency Injections:
    --------------------------
    1) property injection (or) setter injection (or) literal injection
    2) constructor injection
    3) array injection
    4) collection injection
        a) list
        b) set
        c) map
    5) bean injection


     
    Annotation Configurations:
    ------------------------------
    @Component                      (stereotype annotation)

            what is a component?
                component is a class whose objects are created and managed by the container.

        @Repository
        @Service
        @Configuration

    @Value
            to inject literals




    Popular Exceptions:
    ---------------------
    1) BeanCreationException
    2) NoSuchBeanException
    
    
                                        Spring JDBC
                                    --------------------
1) Spring jdbc module is an abstraction layer on top of jdbc technology.
2) this layer avoids the boiler plate code used in jdbc programming. 

Spring JDBC value-add provided by the Spring Framework's on top JDBC layer

a) Define connection parameters
b) Open the connection
c) Specify the statement
e) Prepare and execute the statement
f) Set up the loop to iterate through the results (if any)
g) Do the work for each iteration
h) Process any exception
i) Handle transactions
j) Close the connection

Spring utilizes Template pattern to hide all low level details while giving you 
extension hooks to extend and work with JDBC.


API:
----
JdbcTemplate
NamedParameterJdbcTemplate
    Template class with a basic set of JDBC operations, allowing the use of named parameters 
    rather than traditional '?' placeholders (positional parameters)

    Named parameters are variable names but preceeded with colon (:).
    It use always PreparedStatement internally.


SimpleJdbcTemplate      (removed from spring 4.3)
SimpleJdbcCall    :     sto call stored procedures




JdbcTemplate:
---------------
    is a class given by spring framework to perform DB operations.

methods:
---------
public int update(String query) : to insert, update, delete
public int update(String query, Object ...args) : to insert, update, delete using PreparedStatement
public void execute(String query): to DDL commands
public T query(String sql, ResultSetExtractor rse): to fetch records using ResultSetExtractor
public List query(String sql, RowMapper rm) : to fetch records using RowMapper

NamedParameterJdbcTemplate:
---------------------------------
update()
queryForObject()        :   return one row
queryForList()          :   return multiple rows and they can be converted into list.
queryForMap() 
queryForStream()        :
batchUpdate()   


                                            Spring Boot
                                        -------------------
    is a spring framework module that offer auto configuration there by providing
    RAD (Rapid Application Developemt)

        Spring Core             DI, IoC
        Spring Context          Autowiring and Life cycle management of beans
        Spring SpEL             expression language

                configure bean using bean config class, property source etc.,

        Spring AOP
                configure AOP providers, aspects, join point, point cuts etc.,

        Spring Web              Web MVC and Web Rest API Support
                configure url handlers, view resolvers, front-controller etc.,

        for every spring module, we need few settings i.e., configurations.


        spring boot automates the configuration for any spring module.

    Spring boot Applications are called as "Spring Starter Projects".
    it can be created 3 ways.
        
        1. spring boot CLI
        2. https://start.spring.io web tool
        3. using STS -> Spring starter Project Wizard


    Why Spring Boot?
        RAD tool
        Opinionated Dependencies
        No XML based configuration
        Convention over Configuration
        Integrated Server For Web Development   -   (tomcat, jetty, undertow server)
        Standardization of Micro Services   
        Cloud Support

    Base Lines of Spring Boot 2.x?
        Java 8
        Spring 5.0
        Hibernate 5.2
        Tomcat 8.5
        Jetty 9.4
        Junit 5
        Maven
        Gradle 4.x


    spring boot starters:
    -------------------------
    1) spring-boot-starter


    @SpringBootApplication
        =   @SpringBootConfiguration        (@Configuration)
        +   @ComponentScan("thePackageNameInWhichCurrentClassExists")
        +   @EnableAutoConfiguration
        +   @PropertySource("classpath:application.properties")

11-Dec-2022
--------------------

SpringApplication.run():
    1. create an ApplicationContext. (all beans are created)
    2. execute all Spring Boot Runners if any.
    3. Startup the embedded server if any.
    4. destroy the ApplicationContext.

Spring Boot Runners:
    1. CommandLineRunner        void run(String[] args)
    2. ApplicationRunner        void run(ApplicationArgs[] args)


autowiring:
    a) byType       (default behaviour)     -    it will check with the class/inteface name 
    b) byName                               -    it will check with the object name
            @Qualifier("beanName")



17-Dec-2022
--------------------------------
                                    
                                    
                                    Spring Data 
                                ---------------------
It is mainly to communicate with databases.

1. Spring Data JDBC
        NamedParameterJdbcTemplate
            update
            query
            queryForObject
        BeanPropertySqlParameterSource
        MapSqlParameterSource

2. Spring Data JPA
        default orm is hibernate.

        CrudRepository  interface
        JpaRepository   interface       (inherited from CrudRepository)
            
            provide all methods to perform CRUD operations.
            
7-Jan-2023 & 8-Jan-2023
----------------------
    Spring Data JPA - Book Application

    CrudRepository
        findAll()
        findById()
        deleteById()
        existsById()
        save()

14-Jan-2023
---------------
    Spring Web MVC

    MVC is a design pattern.

    MVC :   Model           :  contains data, which can be moved across different layers of 
                               application.
                               (class)
            View            :  presentation
                                (view engines - jsp, thymeleaf etc.,)
            Controller      :  it will control the flow of application.
                                (servlet)

                                will have a methods that are associated with a url.
                                
15-Jan-2023
-----------------
        view    :   .jsp / .th

        mv.setViewName("home")      means       /WEB-INF/view/home.jsp

        ViewResolver    interface

            implementation class:
                InternalResourceViewResolver 

            prefix:     /WEB-INF/view/
            suffix:     .jsp
        

21-Jan-2023
----------------
Web Application : client will interact with it.  (C2B)
Web Service: one machine will talk to other (B2B)
    API
we do not have any UI.


1) SOAP         (outdated)
                XML 
                it is heavy weight
2) RESTful      
                JSON        (javascript object notation)
                it is light weight


PostMan     ->  web tool to execute your APIs.

Spring Web MVC REST         (Spring REST)

@RestController = @Controller + @ResponseBody

Http Status Codes
    200     -   OK

    404     - Not Found





























    

