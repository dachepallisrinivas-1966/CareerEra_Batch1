Java EE
----------------------------------------------------------------

                                        Servlets
                                        ---------
query string:

        url ? var-1 = vaue-1 & var-2 = value-2 & ...


request.getParameter("parameter-name")


Request Dispatching:        (server-side redirection)
-----------------------
    i) include
    ii) forward


            client  -> first
                         |
                       second


sendRedirect():             (client-side redirection)


ServletConfig
    setAttribute(key, value)
    getAttribute(key)

    data stored in the config object, is available for all users of the servlet.

ServletContext
    setAttribute(key, value)
    getAttribute(key)

    data stored in the context object, is available for all servlets.

    getServletContext()
    getInitParameter(key);



                                                JSP
                                        -----------------------

    Model           :   data
    View            :   jsp
    Controller      :   servlets






                                                Java EE Frameworks
                        ============================================================
						
                                                Hibernate
                                        ---------------------------

ORM Frameworks:
    Hibernate
    TopLink
    MyBatis (iBatis)

Data Representation                         OOP                             RDBMS
....................................................................................................
Entity Def                                  class                           table
Properties                                  field                           column
Behaviours                                  method                          ---
Entity                                      object                          record/Tuple

It is called "Paradigm Mismatch"


Has A Relationships (Aggregation)
 Composition
    an entity possess another entity        class Address {                 Employees
    An Employee composes of an Address          String street;               empid,name,slary,street,city
                                                String city;
                                            }

                                            class Employee {
                                                Long empId;
                                                String name;
                                                Double salary;
                                                Address address;
                                            }

                                            class MovieTicketId{
                                                String seatNumber;
                                                LocalDateTime showDateTime;
                                                String theaterName;
                                                String screen;
                                            }

                                            class MovieTicket{
                                                MovieTicketId ticketid;
                                                String showTitle;  
                                                String ticketHolderName;
                                            }

 Association
    OneToOne                                class BankAccount {             BankAccount
                                                String accNum;                 accNum,ifsc,bankName
                                                String ifsc;
                                                String bankName;
                                                Employee holder;
                                            }

                                            class Employee{                 Employees
                                                Long empId;                     empid,name,basic,accnum
                                                String name;
                                                Dobule basic;
                                                BankAccount salAccount;
                                            }

    OneToMany                               class Department {              Depts
    ManyToOne                                   Long deptId;                   deptId,title
                                                String title;
                                                Set<Employee> emps;
                                            }

                                            class Employee {                Employees
                                                Long empId;                     empid,name,basic,deptid
                                                String name;
                                                Double basic;
                                                Department dept;
                                            }

    ManyToMany                              class Employee {                Employees
                                                Long empId;                     empid,name,basic
                                                String name;
                                                Double basic;
                                                Set<Project> projects;
                                            }     

                                            class Project {                 Projects
                                                Long projectId;                 prjId,title
                                                String projectTitle;
                                                Set<Employee> team;
                                            }
                                                                            Prj_Emps
                                                                                prjid,empid



                                            class Employee {                Employees
                                                Long empId;                     empid,name,basic
                                                String name;
                                                Double basic;
                                                @OneToMany
                                                Set<TeamMembership> projects;
                                            }     

                                            class Project {                 Projects
                                                Long projectId;                 prjId,title
                                                String projectTitle;
                                                @OneToMany
                                                Set<TeamMembership> team;
                                            }
                                            
                                            class TeamMembership {          Memeberships
                                                Long membershipId;              msid,empId,prId,role
                                                @ManyToOne
                                                Employee member;
                                                @ManyToOne
                                                Project project;
                                                String role;
                                            }

Is A Relationships (Realization)            class Employee {                
                                                Long empId;                   
                                                String name;
                                                Double basic;
                                            }

                                            class Manager extends Employee{
                                                Double allowence;
                                            }

                                            class ContractEmployee extends Employee {
                                                Integer duration;
                                            }

                                                       Single Table       AllEmployees
                                                                             empid,name,basic,allowence,duration,
                                                                             emp_type - DiscriminatorColumn
                                                                             "E", "M", "C" - DiscriminatorValue


                                                       Joined               Emps    empid(PK),name,basic
                                                                            Mgrs    empid(PK FK),allowence
                                                                            cemps   empid(PK FK),duration
                                                                            
                                                       Table Per Class      emps_only    empid(PK),name,basic
                                                                            mgrs_only    empid(PK),name,basic,allow
                                                                            cemps_only   empid(PK),name,basic,duration


    HQL:
        stands for Hibernate Query Language.

        HQL doesnt need tables, it works with entities and properties.

    Query
    TypedQuery


    what is the difference between get() and load()?

        load() return "ObjectNotFoundException" when entity not found.
        get() return null when entity not found.

    
    Criteria:
    -----------
    
    Example of HCQL to get all the records
Crietria c=session.createCriteria(Emp.class);//passing Class class argument  
List list=c.list();  
Example of HCQL to get the 10th to 20th record
Crietria c=session.createCriteria(Emp.class);  
c.setFirstResult(10);  
c.setMaxResult(20);  
List list=c.list();  
Example of HCQL to get the records whose salary is greater than 10000
Crietria c=session.createCriteria(Emp.class);  
c.add(Restrictions.gt("salary",10000));//salary is the propertyname  
List list=c.list();  
Example of HCQL to get the records in ascending order on the basis of salary
Crietria c=session.createCriteria(Emp.class);  
c.addOrder(Order.asc("salary"));  
List list=c.list();  
HCQL with Projection
We can fetch data of a particular column by projection such as name etc. Let's see the simple example of projection that prints data of NAME column of the table only.

Criteria c=session.createCriteria(Emp.class);  
c.setProjection(Projections.property("name"));  
List list=c.list();  
























JPA - Java Persistence API + (JTA - Java Transaction API)
-----------------------------------------------------------

    JPA and JTA are JavaEE specifications to provide the ORM for java applications.

    JPA / JTA implementations / JPA or JTA Providers
        1. Hibernate
        2. TopLink
        3. iBatis ...etc

    1. Entity Mapping

            @Entity                 class level     configs that a class is an entity
            @Emedable               class level     configs that a class is a part of an entity

            @Table(name="")         class level     map the entity class with a table

            @Inheretence            class level     config the Is A type 
                                                    (Single table/join table/table per class)
            @DiscriminatorColumn    class level
            @DiscriminatorValue     class level

            @Embeded                Field level     config that a field is a embedable object (composition)

            @Id                     Field level     config a field as primary key
            @EmbededId              Field level     config a field as a composite key

            @GeneratedValue         Field level     used along with @Id
                                                        AUTO            jpa-provider's inmeme seqeunce
                                                        IDENTITY        SQL Server/MySQL PK as identity col
                                                        SEQUENCE        oracle sequence

            @Column                 Field level     is an optional annotation on each field
                                                    configs column name,nullable, unique ..etc
                                                    if a field is not marked with @column annotation, then
                                                    that field is mapped to a colmun having the smae name as 
                                                    that of the field.

            @Transiant              Field level     config that a field need not be persisted in the db table.

            @OneToOne               Field level
            @OneToMany              Field level
            @ManyToOne              Field level
            @ManyToMany             Field level

                    mappedBy                        configs the name of the field of 
                                                    the entity on the oppsite side of the relation
                    fetechStrategy                  LAZY | EAGER
                    cascade                         ALL | PERSIST | MERGE | DELETE | NONE | REFERESH | ORPHAN

            @JoinColumn             Field level     config a name to the foreign key col
            @JoinTable              Field level     configs a thrid talbe for relatiosn incase of ManyToMany


    

